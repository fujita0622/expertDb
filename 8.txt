8-1 ビジネスロジックをアプリケーションコードで実装することについて、以下の問いについて考えてください。
問1 ビジネスロジックをアプリケーション側で実装するときの是非
問2 ビジネスロジックをデータベースの「トリガー」で実装することの是非

8-2 一時的にしか使わず、処理が終わればなくなってかまわないようなデータを用意する手段として、DBMSは、「一時テーブル」という機能を用意しています。この機能について調べ、使うことの是非を考えてください。


[8-1.回答]
◆問1
データベース側ではテーブルの制約を行い、ビジネスロジックはアプリケーション側で行うべきです。
[理由]
データベース側で用意されている主キー、NOT NULL制約などを基本の制約はSQL文の処理がアプリケーション側で実装したときより速く処理できる。
また、仕様が変更でDB側とアプリケーション側両方に修正が必要になる可能性を考えるとアプリケーション側で統一したほうが保守性が高いです。

[ビジネスロジックをDB側、アプリ側で実装する際の具体的な例]
要件：お客様情報テーブルの性別のカラムで値が0の場合は「男」,1の場合は「女」と画面に表示する

○DB側
CASE式でお客様情報テーブルの性別のカラムは0の場合は「男」、1の場合は「女」に置き換え取得し画面に表示

○AP側
お客様情報テーブルの性別のカラムを取得し、if文で値が0の場合は「男」、1の場合は「女」に置き換え画面に表示


◆問2
トリガーは主に複数テーブル間のデータの整合性確保に使用されるが、下記弊害があるのでできる限りトリガーを使用しないでビジネスロジックを実装するべきです。

[トリガーで実装することによる弊害]
・DB側とアプリケーション側両方でビジネスロジックが存在するので修正が発生した際に修正箇所の特定がしずらくなり保守性が下がる。
・トリガーは透過的なので開発者が忘れてしまいやすい。


[8-2.回答]
一時テーブルはちょっとした途中加工データを置いて置きたい場合、通常のテーブルでは下記の理由から、

・メモリに置くには大きすぎる
・排他制御や使用後の削除などの手間

代わりに使用されなくなると自動的に削除される一時テーブルを使うと便利です。

一時テーブルの欠点としては、統計情報がないのでコストベース・オプティマイザが利用できない点が挙げられます。