8-1 ビジネスロジックをアプリケーションコードで実装することについて、以下の問いについて考えてください。
問1 ビジネスロジックをアプリケーション側で実装するときの是非
問2 ビジネスロジックをデータベースの「トリガー」で実装することの是非

8-2 一時的にしか使わず、処理が終わればなくなってかまわないようなデータを用意する手段として、DBMSは、「一時テーブル」という機能を用意しています。この機能について調べ、使うことの是非を考えてください。


[8-1.回答]
◆問1
データベース側で制約できるビジネスロジックはデータベース側で行い、それ以外はアプリケーション側で行うべきです。
[理由]
データベース側で用意されている主キー、NOT NULL制約などを基本の制約はSQL文の処理がアプリケーション側で実装したときより速く処理できる。
また、データベース側で複雑な制約が難しいのであればアプリケーション側で行うしか方法がないからです。

◆問2
トリガーは主にデータの整合性確保に使用され、また下記問題があるのでできる限り別の手段でビジネスロジックを実装する

・明示的な指名でなくイベント起動されるので、管理を誤ると「何かが動いてる」状態になり、この理由から禁忌視されることが多い
トリガーの動作によって、さらに別のトリガーが呼び出されるような場合に、収拾がつかなくなる
・基本的に毎回呼ばれるものなので、あまり重い処理を記述するといろいろ足を引っ張る


[8-2.回答]
一時テーブルはちょっとした途中加工データを置いて置きたい場合、通常のテーブルでは下記の理由から、

・メモリに置くには大きすぎる
・排他制御や使用後の削除などの手間

代わりに使用されなくなると自動的に削除される一時テーブルを使うと便利です。

一時テーブルの欠点としては、統計情報がないのでコストベース・オプティマイザが利用できない点が挙げられます。